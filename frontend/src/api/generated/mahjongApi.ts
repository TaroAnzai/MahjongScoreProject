/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Task Progress API (Dev)
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DefaultErrorResponse,
  GameCreate,
  GameResponse,
  GameUpdate,
  GetApiTablesParams,
  Group1,
  GroupCreate,
  GroupUpdate,
  LoginByKey,
  Message,
  Message1,
  Message2,
  Message3,
  Player,
  PlayerCreate,
  PlayerResponse,
  ScoreSummary,
  TableBase,
  TableCreate,
  TableUpdate,
  TableWithPlayers,
  Tournament,
  TournamentCreate,
  TournamentResult,
  UnprocessableEntityResponse
} from './mahjongApi.schemas';

import { customFetch } from '../customFetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get all tournaments
 */
export const getApiTournaments = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Tournament[]>(
      {url: `/api/tournaments/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTournamentsQueryKey = () => {
    return [`/api/tournaments/`] as const;
    }

    
export const getGetApiTournamentsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTournaments>>, TError = DefaultErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournaments>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTournamentsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTournaments>>> = ({ signal }) => getApiTournaments(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTournaments>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTournamentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTournaments>>>
export type GetApiTournamentsQueryError = DefaultErrorResponse


/**
 * @summary Get all tournaments
 */

export function useGetApiTournaments<TData = Awaited<ReturnType<typeof getApiTournaments>>, TError = DefaultErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournaments>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTournamentsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new tournament
 */
export const postApiTournaments = (
    tournamentCreate: TournamentCreate,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Tournament>(
      {url: `/api/tournaments/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tournamentCreate, signal
    },
      options);
    }
  


export const getPostApiTournamentsMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTournaments>>, TError,{data: TournamentCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTournaments>>, TError,{data: TournamentCreate}, TContext> => {

const mutationKey = ['postApiTournaments'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTournaments>>, {data: TournamentCreate}> = (props) => {
          const {data} = props ?? {};

          return  postApiTournaments(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTournamentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTournaments>>>
    export type PostApiTournamentsMutationBody = TournamentCreate
    export type PostApiTournamentsMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary Create a new tournament
 */
export const usePostApiTournaments = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTournaments>>, TError,{data: TournamentCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiTournaments>>,
        TError,
        {data: TournamentCreate},
        TContext
      > => {

      const mutationOptions = getPostApiTournamentsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Get tournament by ID
 */
export const getApiTournamentsTournamentId = (
    tournamentId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Tournament>(
      {url: `/api/tournaments/${tournamentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTournamentsTournamentIdQueryKey = (tournamentId?: number,) => {
    return [`/api/tournaments/${tournamentId}`] as const;
    }

    
export const getGetApiTournamentsTournamentIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTournamentsTournamentId>>, TError = DefaultErrorResponse>(tournamentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTournamentsTournamentIdQueryKey(tournamentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTournamentsTournamentId>>> = ({ signal }) => getApiTournamentsTournamentId(tournamentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tournamentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTournamentsTournamentIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTournamentsTournamentId>>>
export type GetApiTournamentsTournamentIdQueryError = DefaultErrorResponse


/**
 * @summary Get tournament by ID
 */

export function useGetApiTournamentsTournamentId<TData = Awaited<ReturnType<typeof getApiTournamentsTournamentId>>, TError = DefaultErrorResponse>(
 tournamentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTournamentsTournamentIdQueryOptions(tournamentId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete tournament
 */
export const deleteApiTournamentsTournamentId = (
    tournamentId: number,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<void>(
      {url: `/api/tournaments/${tournamentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTournamentsTournamentIdMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTournamentsTournamentId>>, TError,{tournamentId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTournamentsTournamentId>>, TError,{tournamentId: number}, TContext> => {

const mutationKey = ['deleteApiTournamentsTournamentId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTournamentsTournamentId>>, {tournamentId: number}> = (props) => {
          const {tournamentId} = props ?? {};

          return  deleteApiTournamentsTournamentId(tournamentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTournamentsTournamentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTournamentsTournamentId>>>
    
    export type DeleteApiTournamentsTournamentIdMutationError = DefaultErrorResponse

    /**
 * @summary Delete tournament
 */
export const useDeleteApiTournamentsTournamentId = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTournamentsTournamentId>>, TError,{tournamentId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTournamentsTournamentId>>,
        TError,
        {tournamentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiTournamentsTournamentIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Â§ß‰ºöÂçò‰Ωç„ÅÆ„Çπ„Ç≥„Ç¢ÈõÜË®àÁµêÊûú„ÇíËøî„Åô
 */
export const getApiTournamentsTournamentIdResults = (
    tournamentId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TournamentResult>(
      {url: `/api/tournaments/${tournamentId}/results`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTournamentsTournamentIdResultsQueryKey = (tournamentId?: number,) => {
    return [`/api/tournaments/${tournamentId}/results`] as const;
    }

    
export const getGetApiTournamentsTournamentIdResultsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>, TError = DefaultErrorResponse>(tournamentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTournamentsTournamentIdResultsQueryKey(tournamentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>> = ({ signal }) => getApiTournamentsTournamentIdResults(tournamentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tournamentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTournamentsTournamentIdResultsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>>
export type GetApiTournamentsTournamentIdResultsQueryError = DefaultErrorResponse


/**
 * @summary Â§ß‰ºöÂçò‰Ωç„ÅÆ„Çπ„Ç≥„Ç¢ÈõÜË®àÁµêÊûú„ÇíËøî„Åô
 */

export function useGetApiTournamentsTournamentIdResults<TData = Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>, TError = DefaultErrorResponse>(
 tournamentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentIdResults>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTournamentsTournamentIdResultsQueryOptions(tournamentId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Âçì„Åî„Å®„ÅÆ„ÇØ„É≠„Çπ„ÉÜ„Éº„Éñ„É´Áî®„Çπ„Ç≥„Ç¢„ÇíËøî„Åô
 */
export const getApiTournamentsTournamentIdSummary = (
    tournamentId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<ScoreSummary>(
      {url: `/api/tournaments/${tournamentId}/summary`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTournamentsTournamentIdSummaryQueryKey = (tournamentId?: number,) => {
    return [`/api/tournaments/${tournamentId}/summary`] as const;
    }

    
export const getGetApiTournamentsTournamentIdSummaryQueryOptions = <TData = Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>, TError = DefaultErrorResponse>(tournamentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTournamentsTournamentIdSummaryQueryKey(tournamentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>> = ({ signal }) => getApiTournamentsTournamentIdSummary(tournamentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tournamentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTournamentsTournamentIdSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>>
export type GetApiTournamentsTournamentIdSummaryQueryError = DefaultErrorResponse


/**
 * @summary Âçì„Åî„Å®„ÅÆ„ÇØ„É≠„Çπ„ÉÜ„Éº„Éñ„É´Áî®„Çπ„Ç≥„Ç¢„ÇíËøî„Åô
 */

export function useGetApiTournamentsTournamentIdSummary<TData = Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>, TError = DefaultErrorResponse>(
 tournamentId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTournamentsTournamentIdSummary>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTournamentsTournamentIdSummaryQueryOptions(tournamentId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all groups
 */
export const getApiGroups = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Group1[]>(
      {url: `/api/groups/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiGroupsQueryKey = () => {
    return [`/api/groups/`] as const;
    }

    
export const getGetApiGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroups>>, TError = DefaultErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroups>>> = ({ signal }) => getApiGroups(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroups>>>
export type GetApiGroupsQueryError = DefaultErrorResponse


/**
 * @summary Get all groups
 */

export function useGetApiGroups<TData = Awaited<ReturnType<typeof getApiGroups>>, TError = DefaultErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroups>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new group
 */
export const postApiGroups = (
    groupCreate: GroupCreate,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Group1>(
      {url: `/api/groups/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupCreate, signal
    },
      options);
    }
  


export const getPostApiGroupsMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroups>>, TError,{data: GroupCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiGroups>>, TError,{data: GroupCreate}, TContext> => {

const mutationKey = ['postApiGroups'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiGroups>>, {data: GroupCreate}> = (props) => {
          const {data} = props ?? {};

          return  postApiGroups(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiGroupsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGroups>>>
    export type PostApiGroupsMutationBody = GroupCreate
    export type PostApiGroupsMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary Create a new group
 */
export const usePostApiGroups = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiGroups>>, TError,{data: GroupCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiGroups>>,
        TError,
        {data: GroupCreate},
        TContext
      > => {

      const mutationOptions = getPostApiGroupsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Get a single group by ID
 */
export const getApiGroupsGroupId = (
    groupId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Group1>(
      {url: `/api/groups/${groupId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiGroupsGroupIdQueryKey = (groupId?: number,) => {
    return [`/api/groups/${groupId}`] as const;
    }

    
export const getGetApiGroupsGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiGroupsGroupId>>, TError = DefaultErrorResponse>(groupId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupsGroupId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiGroupsGroupIdQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGroupsGroupId>>> = ({ signal }) => getApiGroupsGroupId(groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiGroupsGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiGroupsGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGroupsGroupId>>>
export type GetApiGroupsGroupIdQueryError = DefaultErrorResponse


/**
 * @summary Get a single group by ID
 */

export function useGetApiGroupsGroupId<TData = Awaited<ReturnType<typeof getApiGroupsGroupId>>, TError = DefaultErrorResponse>(
 groupId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiGroupsGroupId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiGroupsGroupIdQueryOptions(groupId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a group
 */
export const putApiGroupsGroupId = (
    groupId: number,
    groupUpdate: GroupUpdate,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<Group1>(
      {url: `/api/groups/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: groupUpdate
    },
      options);
    }
  


export const getPutApiGroupsGroupIdMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGroupsGroupId>>, TError,{groupId: number;data: GroupUpdate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiGroupsGroupId>>, TError,{groupId: number;data: GroupUpdate}, TContext> => {

const mutationKey = ['putApiGroupsGroupId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiGroupsGroupId>>, {groupId: number;data: GroupUpdate}> = (props) => {
          const {groupId,data} = props ?? {};

          return  putApiGroupsGroupId(groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiGroupsGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiGroupsGroupId>>>
    export type PutApiGroupsGroupIdMutationBody = GroupUpdate
    export type PutApiGroupsGroupIdMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary Update a group
 */
export const usePutApiGroupsGroupId = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGroupsGroupId>>, TError,{groupId: number;data: GroupUpdate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiGroupsGroupId>>,
        TError,
        {groupId: number;data: GroupUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiGroupsGroupIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Delete a group
 */
export const deleteApiGroupsGroupId = (
    groupId: number,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<DefaultErrorResponse>(
      {url: `/api/groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiGroupsGroupIdMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupsGroupId>>, TError,{groupId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupsGroupId>>, TError,{groupId: number}, TContext> => {

const mutationKey = ['deleteApiGroupsGroupId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGroupsGroupId>>, {groupId: number}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteApiGroupsGroupId(groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGroupsGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGroupsGroupId>>>
    
    export type DeleteApiGroupsGroupIdMutationError = DefaultErrorResponse

    /**
 * @summary Delete a group
 */
export const useDeleteApiGroupsGroupId = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGroupsGroupId>>, TError,{groupId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiGroupsGroupId>>,
        TError,
        {groupId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiGroupsGroupIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „Ç∞„É´„Éº„ÉóID„Åß„Éó„É¨„Ç§„É§„Éº‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const getApiPlayers = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<PlayerResponse[]>(
      {url: `/api/players`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiPlayersQueryKey = () => {
    return [`/api/players`] as const;
    }

    
export const getGetApiPlayersQueryOptions = <TData = Awaited<ReturnType<typeof getApiPlayers>>, TError = DefaultErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPlayers>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPlayersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPlayers>>> = ({ signal }) => getApiPlayers(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPlayers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPlayersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPlayers>>>
export type GetApiPlayersQueryError = DefaultErrorResponse


/**
 * @summary „Ç∞„É´„Éº„ÉóID„Åß„Éó„É¨„Ç§„É§„Éº‰∏ÄË¶ß„ÇíÂèñÂæó
 */

export function useGetApiPlayers<TData = Awaited<ReturnType<typeof getApiPlayers>>, TError = DefaultErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPlayers>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPlayersQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Éó„É¨„Ç§„É§„Éº„ÇíËøΩÂä†
 */
export const postApiPlayers = (
    playerCreate: PlayerCreate,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<PlayerResponse>(
      {url: `/api/players`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: playerCreate, signal
    },
      options);
    }
  


export const getPostApiPlayersMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPlayers>>, TError,{data: PlayerCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPlayers>>, TError,{data: PlayerCreate}, TContext> => {

const mutationKey = ['postApiPlayers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPlayers>>, {data: PlayerCreate}> = (props) => {
          const {data} = props ?? {};

          return  postApiPlayers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPlayersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPlayers>>>
    export type PostApiPlayersMutationBody = PlayerCreate
    export type PostApiPlayersMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Éó„É¨„Ç§„É§„Éº„ÇíËøΩÂä†
 */
export const usePostApiPlayers = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPlayers>>, TError,{data: PlayerCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiPlayers>>,
        TError,
        {data: PlayerCreate},
        TContext
      > => {

      const mutationOptions = getPostApiPlayersMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
 */
export const getApiPlayersPlayerId = (
    playerId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<PlayerResponse>(
      {url: `/api/players/${playerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiPlayersPlayerIdQueryKey = (playerId?: number,) => {
    return [`/api/players/${playerId}`] as const;
    }

    
export const getGetApiPlayersPlayerIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPlayersPlayerId>>, TError = DefaultErrorResponse>(playerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPlayersPlayerId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPlayersPlayerIdQueryKey(playerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPlayersPlayerId>>> = ({ signal }) => getApiPlayersPlayerId(playerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(playerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPlayersPlayerId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiPlayersPlayerIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPlayersPlayerId>>>
export type GetApiPlayersPlayerIdQueryError = DefaultErrorResponse


/**
 * @summary „Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
 */

export function useGetApiPlayersPlayerId<TData = Awaited<ReturnType<typeof getApiPlayersPlayerId>>, TError = DefaultErrorResponse>(
 playerId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiPlayersPlayerId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiPlayersPlayerIdQueryOptions(playerId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „Éó„É¨„Ç§„É§„Éº„ÇíÂâäÈô§ÔºàÂ§ß‰ºöÂèÇÂä†‰∏≠„ÅØ‰∏çÂèØÔºâ
 */
export const deleteApiPlayersPlayerId = (
    playerId: number,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<Message>(
      {url: `/api/players/${playerId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiPlayersPlayerIdMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPlayersPlayerId>>, TError,{playerId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiPlayersPlayerId>>, TError,{playerId: number}, TContext> => {

const mutationKey = ['deleteApiPlayersPlayerId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiPlayersPlayerId>>, {playerId: number}> = (props) => {
          const {playerId} = props ?? {};

          return  deleteApiPlayersPlayerId(playerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiPlayersPlayerIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPlayersPlayerId>>>
    
    export type DeleteApiPlayersPlayerIdMutationError = DefaultErrorResponse

    /**
 * @summary „Éó„É¨„Ç§„É§„Éº„ÇíÂâäÈô§ÔºàÂ§ß‰ºöÂèÇÂä†‰∏≠„ÅØ‰∏çÂèØÔºâ
 */
export const useDeleteApiPlayersPlayerId = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPlayersPlayerId>>, TError,{playerId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiPlayersPlayerId>>,
        TError,
        {playerId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiPlayersPlayerIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „Éà„Éº„Éä„É°„É≥„ÉàID„ÅßÂçì‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export const getApiTables = (
    params?: GetApiTablesParams,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TableBase[]>(
      {url: `/api/tables`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiTablesQueryKey = (params?: GetApiTablesParams,) => {
    return [`/api/tables`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiTablesQueryOptions = <TData = Awaited<ReturnType<typeof getApiTables>>, TError = UnprocessableEntityResponse | DefaultErrorResponse>(params?: GetApiTablesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTables>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTablesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTables>>> = ({ signal }) => getApiTables(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTables>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTablesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTables>>>
export type GetApiTablesQueryError = UnprocessableEntityResponse | DefaultErrorResponse


/**
 * @summary „Éà„Éº„Éä„É°„É≥„ÉàID„ÅßÂçì‰∏ÄË¶ß„ÇíÂèñÂæó
 */

export function useGetApiTables<TData = Awaited<ReturnType<typeof getApiTables>>, TError = UnprocessableEntityResponse | DefaultErrorResponse>(
 params?: GetApiTablesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTables>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTablesQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Âçì„Çí‰ΩúÊàê
 */
export const postApiTables = (
    tableCreate: TableCreate,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TableBase>(
      {url: `/api/tables`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tableCreate, signal
    },
      options);
    }
  


export const getPostApiTablesMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTables>>, TError,{data: TableCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTables>>, TError,{data: TableCreate}, TContext> => {

const mutationKey = ['postApiTables'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTables>>, {data: TableCreate}> = (props) => {
          const {data} = props ?? {};

          return  postApiTables(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTablesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTables>>>
    export type PostApiTablesMutationBody = TableCreate
    export type PostApiTablesMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary Âçì„Çí‰ΩúÊàê
 */
export const usePostApiTables = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTables>>, TError,{data: TableCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiTables>>,
        TError,
        {data: TableCreate},
        TContext
      > => {

      const mutationOptions = getPostApiTablesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âçì„ÅÆÂèÇÂä†„Éó„É¨„Ç§„É§„Éº„ÇíÂèñÂæó
 */
export const getApiTablesTableIdPlayers = (
    tableId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Player[]>(
      {url: `/api/tables/${tableId}/players`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTablesTableIdPlayersQueryKey = (tableId?: number,) => {
    return [`/api/tables/${tableId}/players`] as const;
    }

    
export const getGetApiTablesTableIdPlayersQueryOptions = <TData = Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>, TError = DefaultErrorResponse>(tableId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTablesTableIdPlayersQueryKey(tableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>> = ({ signal }) => getApiTablesTableIdPlayers(tableId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTablesTableIdPlayersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>>
export type GetApiTablesTableIdPlayersQueryError = DefaultErrorResponse


/**
 * @summary Âçì„ÅÆÂèÇÂä†„Éó„É¨„Ç§„É§„Éº„ÇíÂèñÂæó
 */

export function useGetApiTablesTableIdPlayers<TData = Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>, TError = DefaultErrorResponse>(
 tableId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableIdPlayers>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTablesTableIdPlayersQueryOptions(tableId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Âçì„Å´„Éó„É¨„Ç§„É§„Éº„ÇíËøΩÂä†
 */
export const postApiTablesTableIdPlayers = (
    tableId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<DefaultErrorResponse>(
      {url: `/api/tables/${tableId}/players`, method: 'POST', signal
    },
      options);
    }
  


export const getPostApiTablesTableIdPlayersMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTablesTableIdPlayers>>, TError,{tableId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTablesTableIdPlayers>>, TError,{tableId: number}, TContext> => {

const mutationKey = ['postApiTablesTableIdPlayers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTablesTableIdPlayers>>, {tableId: number}> = (props) => {
          const {tableId} = props ?? {};

          return  postApiTablesTableIdPlayers(tableId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTablesTableIdPlayersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTablesTableIdPlayers>>>
    
    export type PostApiTablesTableIdPlayersMutationError = DefaultErrorResponse

    /**
 * @summary Âçì„Å´„Éó„É¨„Ç§„É§„Éº„ÇíËøΩÂä†
 */
export const usePostApiTablesTableIdPlayers = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTablesTableIdPlayers>>, TError,{tableId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiTablesTableIdPlayers>>,
        TError,
        {tableId: number},
        TContext
      > => {

      const mutationOptions = getPostApiTablesTableIdPlayersMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âçì„Åã„Çâ„Éó„É¨„Ç§„É§„Éº„ÇíÂâäÈô§
 */
export const deleteApiTablesTableIdPlayersPlayerId = (
    tableId: number,
    playerId: number,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<Message1>(
      {url: `/api/tables/${tableId}/players/${playerId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTablesTableIdPlayersPlayerIdMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTablesTableIdPlayersPlayerId>>, TError,{tableId: number;playerId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTablesTableIdPlayersPlayerId>>, TError,{tableId: number;playerId: number}, TContext> => {

const mutationKey = ['deleteApiTablesTableIdPlayersPlayerId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTablesTableIdPlayersPlayerId>>, {tableId: number;playerId: number}> = (props) => {
          const {tableId,playerId} = props ?? {};

          return  deleteApiTablesTableIdPlayersPlayerId(tableId,playerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTablesTableIdPlayersPlayerIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTablesTableIdPlayersPlayerId>>>
    
    export type DeleteApiTablesTableIdPlayersPlayerIdMutationError = DefaultErrorResponse

    /**
 * @summary Âçì„Åã„Çâ„Éó„É¨„Ç§„É§„Éº„ÇíÂâäÈô§
 */
export const useDeleteApiTablesTableIdPlayersPlayerId = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTablesTableIdPlayersPlayerId>>, TError,{tableId: number;playerId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTablesTableIdPlayersPlayerId>>,
        TError,
        {tableId: number;playerId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiTablesTableIdPlayersPlayerIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âçì„ÅÆÂÖ®„Ç≤„Éº„É†„ÇíÂèñÂæó
 */
export const getApiTablesTableIdGames = (
    tableId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<GameResponse[]>(
      {url: `/api/tables/${tableId}/games`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTablesTableIdGamesQueryKey = (tableId?: number,) => {
    return [`/api/tables/${tableId}/games`] as const;
    }

    
export const getGetApiTablesTableIdGamesQueryOptions = <TData = Awaited<ReturnType<typeof getApiTablesTableIdGames>>, TError = DefaultErrorResponse>(tableId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableIdGames>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTablesTableIdGamesQueryKey(tableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTablesTableIdGames>>> = ({ signal }) => getApiTablesTableIdGames(tableId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableIdGames>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTablesTableIdGamesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTablesTableIdGames>>>
export type GetApiTablesTableIdGamesQueryError = DefaultErrorResponse


/**
 * @summary Âçì„ÅÆÂÖ®„Ç≤„Éº„É†„ÇíÂèñÂæó
 */

export function useGetApiTablesTableIdGames<TData = Awaited<ReturnType<typeof getApiTablesTableIdGames>>, TError = DefaultErrorResponse>(
 tableId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableIdGames>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTablesTableIdGamesQueryOptions(tableId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Âçì„Å´Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„ÇíËøΩÂä†
 */
export const postApiTablesTableIdGames = (
    tableId: number,
    gameCreate: GameCreate,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<GameResponse>(
      {url: `/api/tables/${tableId}/games`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: gameCreate, signal
    },
      options);
    }
  


export const getPostApiTablesTableIdGamesMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTablesTableIdGames>>, TError,{tableId: number;data: GameCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTablesTableIdGames>>, TError,{tableId: number;data: GameCreate}, TContext> => {

const mutationKey = ['postApiTablesTableIdGames'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTablesTableIdGames>>, {tableId: number;data: GameCreate}> = (props) => {
          const {tableId,data} = props ?? {};

          return  postApiTablesTableIdGames(tableId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTablesTableIdGamesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTablesTableIdGames>>>
    export type PostApiTablesTableIdGamesMutationBody = GameCreate
    export type PostApiTablesTableIdGamesMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary Âçì„Å´Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„ÇíËøΩÂä†
 */
export const usePostApiTablesTableIdGames = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTablesTableIdGames>>, TError,{tableId: number;data: GameCreate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiTablesTableIdGames>>,
        TError,
        {tableId: number;data: GameCreate},
        TContext
      > => {

      const mutationOptions = getPostApiTablesTableIdGamesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âçì„ÇíÂèñÂæó
 */
export const getApiTablesTableId = (
    tableId: number,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TableWithPlayers>(
      {url: `/api/tables/${tableId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTablesTableIdQueryKey = (tableId?: number,) => {
    return [`/api/tables/${tableId}`] as const;
    }

    
export const getGetApiTablesTableIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTablesTableId>>, TError = DefaultErrorResponse>(tableId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTablesTableIdQueryKey(tableId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTablesTableId>>> = ({ signal }) => getApiTablesTableId(tableId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTablesTableIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTablesTableId>>>
export type GetApiTablesTableIdQueryError = DefaultErrorResponse


/**
 * @summary Âçì„ÇíÂèñÂæó
 */

export function useGetApiTablesTableId<TData = Awaited<ReturnType<typeof getApiTablesTableId>>, TError = DefaultErrorResponse>(
 tableId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTablesTableId>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTablesTableIdQueryOptions(tableId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÂçìÊÉÖÂ†±„ÇíÊõ¥Êñ∞
 */
export const putApiTablesTableId = (
    tableId: number,
    tableUpdate: TableUpdate,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<TableWithPlayers>(
      {url: `/api/tables/${tableId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: tableUpdate
    },
      options);
    }
  


export const getPutApiTablesTableIdMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTablesTableId>>, TError,{tableId: number;data: TableUpdate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiTablesTableId>>, TError,{tableId: number;data: TableUpdate}, TContext> => {

const mutationKey = ['putApiTablesTableId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTablesTableId>>, {tableId: number;data: TableUpdate}> = (props) => {
          const {tableId,data} = props ?? {};

          return  putApiTablesTableId(tableId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTablesTableIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTablesTableId>>>
    export type PutApiTablesTableIdMutationBody = TableUpdate
    export type PutApiTablesTableIdMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary ÂçìÊÉÖÂ†±„ÇíÊõ¥Êñ∞
 */
export const usePutApiTablesTableId = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTablesTableId>>, TError,{tableId: number;data: TableUpdate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiTablesTableId>>,
        TError,
        {tableId: number;data: TableUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiTablesTableIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Âçì„ÇíÂâäÈô§
 */
export const deleteApiTablesTableId = (
    tableId: number,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<Message1>(
      {url: `/api/tables/${tableId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTablesTableIdMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTablesTableId>>, TError,{tableId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTablesTableId>>, TError,{tableId: number}, TContext> => {

const mutationKey = ['deleteApiTablesTableId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTablesTableId>>, {tableId: number}> = (props) => {
          const {tableId} = props ?? {};

          return  deleteApiTablesTableId(tableId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTablesTableIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTablesTableId>>>
    
    export type DeleteApiTablesTableIdMutationError = DefaultErrorResponse

    /**
 * @summary Âçì„ÇíÂâäÈô§
 */
export const useDeleteApiTablesTableId = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTablesTableId>>, TError,{tableId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTablesTableId>>,
        TError,
        {tableId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiTablesTableIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „Ç≤„Éº„É†„ÇíÊõ¥Êñ∞
 */
export const putApiGamesGameId = (
    gameId: number,
    gameUpdate: GameUpdate,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<Message2>(
      {url: `/api/games/${gameId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: gameUpdate
    },
      options);
    }
  


export const getPutApiGamesGameIdMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGamesGameId>>, TError,{gameId: number;data: GameUpdate}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiGamesGameId>>, TError,{gameId: number;data: GameUpdate}, TContext> => {

const mutationKey = ['putApiGamesGameId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiGamesGameId>>, {gameId: number;data: GameUpdate}> = (props) => {
          const {gameId,data} = props ?? {};

          return  putApiGamesGameId(gameId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiGamesGameIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiGamesGameId>>>
    export type PutApiGamesGameIdMutationBody = GameUpdate
    export type PutApiGamesGameIdMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary „Ç≤„Éº„É†„ÇíÊõ¥Êñ∞
 */
export const usePutApiGamesGameId = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiGamesGameId>>, TError,{gameId: number;data: GameUpdate}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiGamesGameId>>,
        TError,
        {gameId: number;data: GameUpdate},
        TContext
      > => {

      const mutationOptions = getPutApiGamesGameIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „Ç≤„Éº„É†„ÇíÂâäÈô§
 */
export const deleteApiGamesGameId = (
    gameId: number,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<Message2>(
      {url: `/api/games/${gameId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiGamesGameIdMutationOptions = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGamesGameId>>, TError,{gameId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiGamesGameId>>, TError,{gameId: number}, TContext> => {

const mutationKey = ['deleteApiGamesGameId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiGamesGameId>>, {gameId: number}> = (props) => {
          const {gameId} = props ?? {};

          return  deleteApiGamesGameId(gameId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiGamesGameIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiGamesGameId>>>
    
    export type DeleteApiGamesGameIdMutationError = DefaultErrorResponse

    /**
 * @summary „Ç≤„Éº„É†„ÇíÂâäÈô§
 */
export const useDeleteApiGamesGameId = <TError = DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiGamesGameId>>, TError,{gameId: number}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiGamesGameId>>,
        TError,
        {gameId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiGamesGameIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary edit_key „Å® type „Çí‰Ωø„Å£„Å¶Áñë‰ºº„É≠„Ç∞„Ç§„É≥„Åô„Çã
 */
export const postApiAuthLoginByKey = (
    loginByKey: LoginByKey,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Message3>(
      {url: `/api/auth/login/by-key`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginByKey, signal
    },
      options);
    }
  


export const getPostApiAuthLoginByKeyMutationOptions = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginByKey>>, TError,{data: LoginByKey}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginByKey>>, TError,{data: LoginByKey}, TContext> => {

const mutationKey = ['postApiAuthLoginByKey'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLoginByKey>>, {data: LoginByKey}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLoginByKey(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginByKeyMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLoginByKey>>>
    export type PostApiAuthLoginByKeyMutationBody = LoginByKey
    export type PostApiAuthLoginByKeyMutationError = UnprocessableEntityResponse | DefaultErrorResponse

    /**
 * @summary edit_key „Å® type „Çí‰Ωø„Å£„Å¶Áñë‰ºº„É≠„Ç∞„Ç§„É≥„Åô„Çã
 */
export const usePostApiAuthLoginByKey = <TError = UnprocessableEntityResponse | DefaultErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLoginByKey>>, TError,{data: LoginByKey}, TContext>, request?: SecondParameter<typeof customFetch>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLoginByKey>>,
        TError,
        {data: LoginByKey},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginByKeyMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getApiAuthPing = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<Message3>(
      {url: `/api/auth/ping`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiAuthPingQueryKey = () => {
    return [`/api/auth/ping`] as const;
    }

    
export const getGetApiAuthPingQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthPing>>, TError = DefaultErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAuthPing>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthPingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthPing>>> = ({ signal }) => getApiAuthPing(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthPing>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiAuthPingQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthPing>>>
export type GetApiAuthPingQueryError = DefaultErrorResponse



export function useGetApiAuthPing<TData = Awaited<ReturnType<typeof getApiAuthPing>>, TError = DefaultErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAuthPing>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiAuthPingQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiAuthDebugSession = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<DefaultErrorResponse>(
      {url: `/api/auth/debug-session`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiAuthDebugSessionQueryKey = () => {
    return [`/api/auth/debug-session`] as const;
    }

    
export const getGetApiAuthDebugSessionQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthDebugSession>>, TError = DefaultErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAuthDebugSession>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthDebugSessionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthDebugSession>>> = ({ signal }) => getApiAuthDebugSession(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthDebugSession>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiAuthDebugSessionQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthDebugSession>>>
export type GetApiAuthDebugSessionQueryError = DefaultErrorResponse



export function useGetApiAuthDebugSession<TData = Awaited<ReturnType<typeof getApiAuthDebugSession>>, TError = DefaultErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAuthDebugSession>>, TError, TData>, request?: SecondParameter<typeof customFetch>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiAuthDebugSessionQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




